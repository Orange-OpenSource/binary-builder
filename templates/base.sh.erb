#!/usr/bin/env bash

download_verify_tar(){
  curl $TAR_URL -s -f -L --retry 3 --connect-timeout 20 --retry-delay 1 -o $FILENAME

  if [ "<%= checksum_type %>" = "SHA256" ]; then
    local checksum=$(sha256sum $FILENAME | awk '{print $1}')
    if [ "$checksum" != "<%= checksum_value[:key] %>" ]; then
      echo "Checksum is not matching!"
      exit 1
    fi
  elif [ "<%= checksum_type %>" = "MD5" ]; then
    local checksum=$(md5sum $FILENAME | awk '{print $1}')
    if [ "$checksum" != "<%= checksum_value[:key] %>" ]; then
      echo "Checksum is not matching!"
      exit 1
    fi
  elif [ "<%= checksum_type %>" = "GPG" ]; then

    gpg --keyserver pgpkeys.mit.edu --recv-key "<%= checksum_value[:rsa_key_id] %>"

    # get key fingerprint
    local fingerprint=$(gpg --status-fd 1 --fingerprint "<%= checksum_value[:rsa_key_id] %>" 2>/dev/null)
    local key_fingerprint=$(echo "$fingerprint" | grep "Key fingerprint*" | awk '{split($0,a,"="); print a[2]}' | sed 's/ //g')

    echo "<%= checksum_value[:key] %>" > /tmp/key.asc
    local gpg_status=$(gpg --status-fd 1 --verify /tmp/key.asc $FILENAME 2> /dev/null)
    local verified=$(echo "$gpg_status" | grep "^\[GNUPG:\] VALIDSIG $key_fingerprint")

    if [ -z "$verified" ]; then
      echo "Checksum is not matching!"
      exit 1
    fi
    rm /tmp/key.asc
  else
    echo "Checksum not provided!"
    exit 1
  fi

}

extract_tar(){
  mkdir -p $DEST_DIR
  tar xf $FILENAME -C $DEST_DIR --strip 1
  rm $FILENAME
  cd $DEST_DIR
}

main() {
  set -xe
  set -o pipefail

  download_verify_tar && extract_tar && template_steps
  echo "Done!"
}




